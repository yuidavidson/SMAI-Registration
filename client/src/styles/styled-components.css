
/*
========== Keyframe Animations ==========
*/

@keyframes borderChange {
    0% {
        height: auto;
        width: auto;
    }
    100% {
        height: auto;
        width: auto;
    }
}

@keyframes borderGrow {
    0% {
        height: 0;
        width: 0;
    }
    100% {
        height: 27px;
        width: 250px;
    }
}

@keyframes borderShrink {
    0% {
        height: 27px;
        width: 250px;
    }
    100% {
        height: 0;
        width: 0;
    }
}

/*
========== General Styles ==========
*/

.bodyWrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 5px;
    border: solid 2px black;
    border-radius: 5px;
    padding: 10px;
}

.contentWrapper {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    max-width: 40vw;
    margin: 5px;
    padding: 5px;
}

.styledHead {
    display: flex;
    justify-content: center;
    padding: 10px;
    /*font-size: ${(props) => props.fontSize ? props.fontSize + 'px' : '20px'};*/
    font-weight: bold;
}

nav.header {
    display: flex;
    flex-direction: column;
    margin: 1px;
    /*  border: solid 1 px black; */
    padding: 1px;
}

nav.header .header-top {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
    margin: 1px;
    border-bottom: solid 5px #bd394b;
    border-radius: 10px;
    padding: 1px;
}

nav.header .header-bottom {
    display: flex;
    justify-content: center;
    margin: 1px;
    /*  border: solid 1 px black; */
    padding: 1px;
}

/*use to be EventWrapper and CamperWrapper*/
nav.header a {
    display: flex;
    height: 30px;
    width: auto;
    text-align: center;
    font-size: 25px;
    color: #bd394b;
    margin: 1px;
    /*  border: solid 1 px black; */
    padding: 1px;
}

.navigationWrapper {
    display: flex;
    height: auto;
    width: auto;
    /*  height: ${(props) => props.step === 'events' ? '0' : '27px'}; */
    /*  width: ${(props) => props.step === 'events' ? '0' : '250px'}; */
    /*  text-align: center; */
    justify-content: space-around;
    font-size: 20px;
    margin: 1px;
    border: outset 3px #91cfa1;
    border-radius: 10px;
    padding: 1px;
    /*  TODO: figure out how to make this animation work correctly = > want the boarder of the navigation to change depending on the content / / animation: ${ */
    /*    (props) => props.step === 'events'  && !props.isFirstRender ? borderShrink : ((props) => props.step !== 'events' ? borderGrow : null)*/
    /*  2s */
}

.footerWrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
}

/*TODO: find and change all references to StyledHead*/
.styledHeader {
    padding: 5px;
    font-size: 20px;
}

.rowWrapper {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
}

/*
========== DropDown Styles ==========
*/

.dropDownWrapper {
    display: flex;
    flex-flow: column;
    justify-content: flex-start;
}

.styledSelect {
    width: 200px;
    height: 100%;
    margin: 2px;
}

.styledOption {
    /*color: ${(props) => (props.selected ? "lightgrey" : "black")};*/
}

/*
========== Button Styles ==========
*/

.styledButton {
    margin: 7px;
    border: solid 2px #99a39c;
    padding: 7px;
    border-radius: 10px;
    background: #91cfa1;
    cursor: pointer;
    width: fit-content;
}
.styledButton:hover {
    background: #53c976;
    border-color: #868787;
    transition: 0.5s;
}

.styledButton:active {
    background: #2491d1;
    border-color: #2b2b2b;
    color: #ffffff;
    transition: 0.5s;
}

.buttonWrapper {
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
}

/* EDIT: work in progress to have a wrapper for the SmallButton */
/* BoolSwitch but currently not working as wanted */
.smallButtonWrapper {
    display: flex;
    flex-direction: row;
    justify-content: center;
    /*  align-items: center; */
}

.styledSmallButton {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 14px;
    height: 14px;
    margin: 1px;
    padding: 1px;
    border: groove black 1px;
    border-radius: 10px;
    /*background: ${(props) => props.isOn ? '#91cfa1' : 'white'};*/
    cursor: pointer;
}

.styledXButton {
    width: 20px;
    height: 20px;
    float: right;
    margin-top: -58px;
    margin-left: -58px;
    padding: 0;
    cursor: pointer;
    border: 2px groove #d96d64;
    border-radius: 20px;
    background: #c45c49;
    font-weight: bold;
    display: inline-block;
    line-height: 0;
}
.styledXButton:hover {
    background: #db3d21;
}

.styledEditButton {
    color: green;
    text-decoration: underline;
    cursor: pointer;
    border: 0;
    background: white;
}

.styledClickableDiv {
    cursor: pointer;
}
.styledClickableDiv:hover {
    opacity: 0.65;
}

/*
========== Modal Styles ==========
*/

@keyframes fadeIn {
    0% {
        opacity: 0;
    }
    50% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

.styledModal {
    width: auto;
    height: auto;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    z-index: 20;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    margin: 10px;
    border: solid 2px black;
    border-radius: 10px;
    padding: 50px;
    background: white;
}

.overlayBackground {
    z-index: 10;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: #0000003a;
    animation: ${fadeIn} 0.5s;
}

/*
========== Error Styles ==========
*/

.styledStringError {
    width: 250px;
    height: 20px;
    text-align: center;
    margin: 2px;
    border: solid 2px #b55e5e;
    border-radius: 10px;
    padding: 2px;
    background: #e89292;
}

.styledObjectError {
    text-align: center;
    margin: 0 2px;
    border: solid 2px #b55e5e;
    border-radius: 4px;
    padding: 0 2px;
    background: #e89292;
}

.inputErrorWrapper {
    display: flex;
    flex-direction: row;
}

/*
========== Image Styles ==========
*/

.imageWrapper {
    height: 60px;
    width: 60px;
    /*  don 't need this after the image is placed align-items: center; */
    margin: 1px;
    border: solid 1px black;
    border-radius: 60px;
    padding: 1px;
    background: green;
}

.styledCheckMark {
    display: flex;
    height: 12px;
    width: 12px;
    justify-content: center;
    align-items: center;
}